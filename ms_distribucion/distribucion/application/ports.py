# distribucion/application/ports.py
from __future__ import annotations
from typing import Protocol, Iterable, Mapping, runtime_checkable
from datetime import datetime

# Persistencia del read-model
class ReadModelRepo(Protocol):
    # idempotencia
    def event_already_processed(self, event_id: str) -> bool: ...
    def mark_event_processed(self, event_id: str) -> None: ...

    # catálogos mínimos
    def upsert_chofer(self, chofer_id: str, nombre: str) -> None: ...

    # bloque
    def upsert_bloque(self, bloque_id: str, fecha: datetime,
                      chofer_id: str, chofer_nombre: str) -> None: ...
    def set_bloque_incompleto(self, bloque_id: str) -> None: ...
    def update_bloque_total_ordenes(self, bloque_id: str) -> None: ...

    # órdenes (no se crean; solo se verifican/enlazan)
    def existing_order_ids(self, ids: Iterable[str]) -> list[str]: ...
    def bulk_link_bloque_orden(self, bloque_id: str, order_ids: Iterable[str]) -> int: ...

# Consumo de eventos (p. ej., Redis)
@runtime_checkable
class EventConsumer(Protocol):
    def read(self, count: int = 100, block_ms: int = 5000) -> Iterable[Mapping]: ...
    def ack(self, message_id: str) -> None: ...
    def dead_letter(self, payload: str, error: str) -> None: ...
