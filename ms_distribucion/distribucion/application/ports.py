from typing import Protocol, Optional, Iterable, Mapping
from datetime import datetime

class ReadModelRepo(Protocol):
    # idempotencia
    def event_already_processed(self, event_id: str) -> bool: ...
    def mark_event_processed(self, event_id: str) -> None: ...

    # catÃ¡logos
    def upsert_chofer(self, chofer_id: str, nombre: str) -> None: ...

    # bloque
    def upsert_bloque(self, bloque_id: str, fecha: datetime,
                      chofer_id: str, chofer_nombre: str) -> None: ...
    def link_bloque_orden(self, bloque_id: str, orden_id: str) -> None: ...
    def update_bloque_total_ordenes(self, bloque_id: str) -> None: ...

    # orden y productos
    def upsert_orden(self, orden: dict) -> None: ...
    def upsert_orden_producto(self, orden_id: str, prod: dict) -> None: ...

class EventConsumer(Protocol):
    def read(self, count: int = 100, block_ms: int = 5000) -> Iterable[Mapping]: ...
