services:
  mysql:
    image: mysql:8.0
    container_name: mysql
    command: ["--default-authentication-plugin=mysql_native_password","--character-set-server=utf8mb4","--collation-server=utf8mb4_unicode_ci"]
    environment:
      MYSQL_ROOT_PASSWORD: "12345678"
      MYSQL_DATABASE: "distribucion"
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -p12345678 --silent"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  # --- Backend Django (ms_distribucion) ---
  ms-distribucion:
    build:
      context: ./ms_distribucion
      target: runtime
    container_name: ms_distribucion
    env_file:
      - ./ms_distribucion/.env
    environment:
      DJANGO_SETTINGS_MODULE: ms_distribucion.settings
      MYSQL_HOST: mysql
      MYSQL_PORT: "3306"
      MYSQL_USER: root
      MYSQL_PASSWORD: "12345678"
      MYSQL_DB: distribucion
      REDIS_DSN: "redis://redis:6379/0"
      LOGISTRACK_CONTRACTS_DIR: /contracts/schemas   # <- usar este en settings.py
      CONTRACTS_DIR: /contracts/schemas              # <- compat si tu cÃ³digo lo lee
      RUN_FACTORY: "true"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    volumes:
      - ./ms_distribucion:/app
      - ./logistrack-contracts/schemas:/contracts/schemas:ro
    restart: unless-stopped
    command:
      [
        "sh","-lc",
        "set -euo pipefail; \
        python manage.py migrate --noinput; \
        echo '>> Ejecutando factory'; \
        python manage.py shell -c 'from distribucion.factory import run; run()'; \
        echo '>> Factory OK'; \
        exec gunicorn ms_distribucion.wsgi:application -b 0.0.0.0:8000 -w 3 --timeout 120"
      ]

  ms_distribucion_worker:
    build:
      context: ./ms_distribucion
      target: runtime
    environment:
      DJANGO_SETTINGS_MODULE: ms_distribucion.settings
      MYSQL_HOST: mysql
      MYSQL_PORT: "3306"
      MYSQL_USER: root
      MYSQL_PASSWORD: "12345678"
      MYSQL_DB: distribucion
      REDIS_DSN: "redis://redis:6379/0"
      LOGISTRACK_CONTRACTS_DIR: /contracts/schemas
      REDIS_STREAM: "distribucion.bloques"
      REDIS_GROUP: "grp.distribucion"
      REDIS_CONSUMER: "worker.1"
      DLQ_STREAM: "ms.dlq.distribucion"
      XREAD_COUNT: "100"
      XREAD_BLOCK_MS: "5000"
      XAUTOCLAIM_IDLE: "60000"
    depends_on:
      redis:
        condition: service_healthy
      mysql:
        condition: service_healthy
    volumes:
      - ./ms_distribucion:/app
      - ./logistrack-contracts/schemas:/contracts/schemas:ro
    restart: unless-stopped
    command: ["sh","-lc","python manage.py consume_distribucion"]
  # --- Front Angular (logistrack-web) ---
  logistrack_web:
    build:
      context: ./logistrack-web
    container_name: logistrack_web
    environment:
      MODE: serve
      PORT: "4200"
      NG_CLI_ANALYTICS: "ci"
      CHOKIDAR_USEPOLLING: "1"
      CHOKIDAR_INTERVAL: "200"
    ports:
      - "4200:4200"
    volumes:
      - ./logistrack-web:/app
      - /app/node_modules
    depends_on:
      - ms-distribucion
    restart: unless-stopped

  symfony_cli:
    build:
      context: ./symfony-backend
      target: runtime-cli      
    container_name: symfony_cli
    working_dir: /app
    env_file:
      - ./symfony-backend/.env
    environment:
      APP_ENV: dev
      APP_DEBUG: "1"
      DATABASE_URL: "mysql://root:12345678@mysql:3306/distribucion?charset=utf8mb4"
      REDIS_DSN: "redis://redis:6379"
      REDIS_STREAM: "distribucion.bloques"
      DLQ_STREAM: "dlq.distribucion.bloques"
      SOURCE_URI: "symfony://distribucion"
      CONTRACT_DATA_SCHEMA: "https://contracts.logistrack/schemas/BloqueConsolidadoListo/1.2/schema.json"
    depends_on:
      redis:
        condition: service_healthy
      mysql:
        condition: service_healthy 
    volumes:
      - ./symfony-backend:/app
      - symfony_vendor:/app/vendor
    command: ["sleep","infinity"]   
    restart: unless-stopped

volumes:
  mysql_data:
  symfony_vendor:
